1. Po flashowaniu EEPROM nie wczytuje się domyślna wartość parametru P39 (max elm)
2. Coś mi się też nie podoba wartość DYNABOX_NUMBER_OF_FUNCTIONS dlatego, żeby poprawnie działało musi być o 2 większa niż faktyczna ilość funkcji.
3. Po zmianie parametrów i wyjściu z konfiguracji dzieją się dziwne rzeczy, ale czy na razie sobie tym głowę zawracac ?
4. Przeniesc uruchamianie timera od drzwi do stanu EndMovement!!
5. Zmienic sekwencje led dla F06, F08 bo się pokrywają z homingiem
6. Wysylac rozkaz trigger po wystapieniu bledu F07, aby równomiernie mrugały ledy
7. Kasowanie błędów, uruchomienie jazdy po wystąpieniu F08
9. Uwaga na czasy klikania bo są zależne od ilości drzwi -> bez sensu, trzeba zmienic.
Pozostało tak na razie: uważac interwałem odpytywania, żeby się zmienna nie przepełniła: door_open_timeout_val = functions[12].param * 10 * 1000 / SLAVE_POLL_INTERVAL / (functions[1].param & 0xFF);
11. klasa helper_flags i w niej uint8_t ustawianie, kasowanie bitow...
12. sprawdzanie zadania kasowania bledow w StateManager(), bo na zywca sie program wywala.
13. Funkcja FaultManager() ustawiajaca, rozkazujaca ktore bledy wyswietlic na ledach, kasujaca
14. Nie potrzeba zapisywania '-' na display co 1 s skoro nie ma bledow.
15. Zmienne typu current_command itp wrzucic do osobnej klasy Common, zaoszczedzi sie stosu, bo nie bedzie
tworzyl kopii tych zmiennych
16. Rozne czasy odpytywania dla poszczegolnych klas maszyn: Lockerbox: 20 ms, Dynabox: 50 ms
17. Dodac funkcję SetDoorCommand(addr, command)
18. Pozmieniac domyslne wartosci parametrow (0xFFFF) w eeprom ze wzgledu na zmiany w klasie Config.
19. Wyłączyc wifi podczas korzystania z Testbox, moze pakiety bladza ?
20. Poprawic wchodzenie do parametrow, zeby sie pokazywalo od razu, a nie po puszczeniu
21. Zastapic w door ify switchami
22. Wprowadzic do rozkazow w door enumy.
23. W controller dyrektywa preprocesora do sprawdzenia czy POLL < TIMEOUT
24. Dlaczego jest płytka led, a nie ledy wmontowane w drzwi ?
25. Uporządkować w door, led komendy: zrobić if(...) funkcja_do_obsługi komendy(); return; itp, switch nie może być bo on sprawdza dokładną wartość i ciężko by było to zrobić jeśli wyższe bity są ustawione i jakieś parametry w tej komendzie przekazywane.
26. Nowe funkcje:
//#define LOCKERBOX_CONTROL_DOOR_START 		52
//#define LOCKERBOX_CONTROL_DOOR_STOP 		81
#define LOCKERBOX_CONTROL_FIRST_DOOR 		52

uint64_t status_opened_closed = 0;
// po każdym rozkazie zerowanie całej zmiennej
// poniżej w funkcji ModbusTCP::ReadReply(...)
for(uint8_t i = 0; i < functions[1].param; i++)
{
	if(i <= 30)
	{
		if(IsD0ReadByClient(i) && mb.BitIsSet(i + 2, 4))
		{
			mb.ClearBit(i + 2, 4);
		}
	}
	if(i > 30)
	{
		if(IsD0ReadByClient(i) && mb.BitIsSet(i + 2 - 30, 12))
		{
			mb.ClearBit(i + 2 - 30, 12);
		}
	}
}

// po odczycie rejestrów
// ...
for(uint8_t i = 0; i < functions[1].param; i++)
{
	if(i <= 30)
	{
		if(!IsD0ReadByClient(i) && mb.BitIsSet(i + 2, 4))
			SetD0ReadByClient(i);
	}
	if(i > 30)
	{
		if(!IsD0ReadByClient(i) && mb.BitIsSet(i + 2, 12))
			SetD0ReadByClient(i);
	}
}

void SetD0ReadByClient(uint8_t address)
{
	status_opened_closed |= (1UL << address);
}

bool IsD0ReadByClient(uint8_t address)
{
	if((status_opened_closed & (1UL << address)))
		return true;
	else
		return false;
}
/*
ModbusTCP::WriteHi(uint8_t address, uint8_t value)
{
	Registers[address] |= (value << 8);
}

ModbusTCP::WriteLo(uint8_t address, uint8_t value)
{
	Registers[address] |= value;
}
*/
ModbusTCP::BitIsSet(uint8_t address, uint8_t bit)
{
	if(Registers[address] & (1 << bit))
		return true;
	else
		return false;
}

void Lockerbox::SetDoorCommand()
{
	for(uint8_t i = 0; i <= 29; i++)
	{
		uint16_t reg = mb.Read(LOCKERBOX_CONTROL_FIRST_DOOR + i);
		
		if(lo(reg) != 0)
			current_command[i] = OpenLockerbox;
		else
			current_command[i] = GetStatusLockerbox;
		
		if(hi(reg) != 0)
			current_command[i + 30] = OpenLockerbox;
			else
			current_command[i + 30] = GetStatusLockerbox;
	}
}

void Lockerbox::EV_UserActionGo(MachineData* pdata)
{
	uint8_t door_cnt = 0;
	
	for(uint8_t i = 0; i <= 29; i++)
	{
		uint16_t reg = mb.Read(LOCKERBOX_CONTROL_FIRST_DOOR + i);
		
		if(lo(reg) != 0)
			door_cnt++;
		
		if(hi(reg) != 0)
			door_cnt++;
		
		if(door_cnt == functions[1].param) 
		{
			fault.SetGlobal(F16_OrderRefused);
			return;
		}
	}
	s.Push(ST_PROCESSING);
}

void Lockerbox::EV_Reply(MachineData* pdata)
{
	uint8_t state = GetState();
	if(current_address <= 30)
		mb.WriteLo(current_address, pdata->data);
	else
		mb.WriteHi(current_address - 30, pdata->data);
		
	SetFaults(state, pdata->data);
	// ...
	static uint8_t door_elm_fault;
	
	if(state == ST_TESTING_ELM && pdata->data == 0x01)
	{
		door_elm_fault++;
		if(door_elm_fault == functions[1].param)
		{
			fault.SetGlobal(F17_24VMissing);
			door_elm_fault = 0;
		}
	}
}
27. Po wysłaniu rozkazu z Testobox wyświetlić na display wartość MSB Registers
28. Dlaczego błędnie jest zapisywana wartość ilości drzwi w EEPROM ?
29. // bootloader: https://forum.pololu.com/t/super-simple-bootloader/525/2
// http://www.nongnu.org/avr-libc/user-manual/group__avr__boot.html
// http://www.precma.it/download/intelhex.pdf
// 0. Zmienić comm_prot -> comm
// 1. Przerzucić funkcje timera do tego samego pliku, będzie lepiej widać -> nowy plik comm_functions.cpp
// 2. Wprowadzić enum do statusów (porównać z controller)
// 3. Wprowadzić jednolite nazewnictwo dla funkcji z timera
// 4. Wyrzucić debugging z drzwi bo zaciemnia obraz, albo po porządkach jakoś sprytniej go wprowadzić
// 5. W led to zrobić enum command
// 6. Z komendy COMM_DYNABOX_GET_STATUS, COMM_LOCKERBOX_OPEN  wyrzucić ustawianie bitów w poleceniu, zrobić to normalnie.
// 7. Koszmarne flagi z Lockerbox usunąć, zrobić to ładnie
// 8. Dokładnie rozkminić P35, First Door
30. W klasie Config błędna wartość rozmiaru struktury, ponieważ wskaźnik na funkcję ma 2 bajty !
